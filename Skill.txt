【前三单元】
1）全局 final+
2）保留小数 DecimalFormat d = new DecimalFormat("0.00");
3)引用数学 Math.PI
4)随机生成数 Math.random()*b + a【下限】 //返回a~a+b之间的一个随机数，不包括a+b
5）舍掉小数取整:Math.floor(3.5)=3
6）四舍五入取整:Math.rint(3.5)=4
7）进位取整:Math.ceil(3.1)=4 
8）取绝对值：Math.abs(-3.5)=3.5
9）取余数：A%B = 余数
10)Math.toDegrees() //弧度->度
11)Math.toRadians() // 度->弧度

【字符和字符串】
1）数学函数、字符和字符串r
2）String lotteryNumber =" " + (int)(Math.random() * 10) + (int)(Math.random() * 10);
3）取出字符串r中的(第一个)字符
String string;
char ch = string.charAt(0)
4）if条件时两个字符串的比较s1.equal(s2)
5）转换
int ASCIICode = input.nextInt();
char character = (char)ASCIICode;
6）输入char型时，需要通过String和 .charAt（）来进行间接输入
7）数字转化为字符的时候要先取整，再转化
8）String letter = input.nextLine();//只以回车为结束，可以读取空格后的字符
String letter = input.next();//以空格为结束，只读取空格前的字符;也以回车为结束
9）ch == 'A'//字符的比较
10）string.length()//返回字符串的长度
11）s1.contains(s2)//s2是否是s1的子串r

【循环】
1）while（case）{循环体}
2）long startTime = System.currentTimeMillis();//获取当前时间
3）(((number1 - number2) == answer) ? " correct": " wrong"//如果两数相减和结果一致，打印correct，否则打印wrong
4）while（条件）；do（满足条件要做的事）
5）for(int i = 0//定义循环体和初始值； i < 100//定义终值；i += 0.1//循环的条件) //也可以只是一种形式
6）float i = 0.1f//最小化浮点数误差
7）long startTime = System.currentTimeMillis();
     long finishTime = System.currentTimeMillis();//观察程序运行时间
8）break //跳出整个循环
     continue //跳出本次循环
9）int a[] = new int[100//数组的长度];//定义数组
10）System.arraycopy(原数组，源数组的起始位置，目的数组，目的数组的起始位置，复制长度)
	int[] fun ={0,1,2,3,4,5,6}; 
	System.arraycopy(fun,0,fun,3,3);
	{0,1,2,0,1,2,6};
11）List<Integer> orderlyArray = new ArrayList<Integer>();//有序数组  
       orderlyArray.add(chaoticArray[0]);//向数组中添加元素
12）String.format("%.2f", e)//保留的法则和数
13）“\t\t”//打印空格且不会出现：9     ？？？ 的情况
			        10    ？？？	
14）Integer.toBinaryString(num)//转化为二进制
        Integer.toHexString(num)//转化为十六进制
        Integer.toOctalString(num)//转化为八进制

【方法】
1）Math.max（a，b）；取最大值 
【数组】
1）打印不同的东西用两次循环，第一个循环输入就成
2）public static void printMax(double...numbers)
//可变长数组，输入时数字逗号分开，也可以直接输入数组
3）java.util.Array.sort()//排序 类似这样的不能直接打印,字符比较阿斯克码值
4）System.out.println(Arrays.toString(array))//以这种形式打印
5）java.util.Arrays.sort(array2, 0, 5);//对于数组从下标为0-5排序
6）java.util.Arrays.parallelSort(array3, 0, 3);//会更高效
7）java.util.Arrays.binarySearch(array, 8.5)//二分查找，可直接打印
8）Arrays.equals(array2, array3)//比较两个数组是否严格相等
9）java.util.Arrays.fill(array4, 6);//把数组的每一个数字都填充为6
10）java.util.Arrays.fill(array4, 1, 3, 6);//把数组下标从1到3-1的数填充为6
11）Object[] 是个顶级父类，在不确定属性时候可以用

【面向对象思考】
1）+ //public
2）- //private
3）#//protected

【继承和多态】
1）this.name //防止创建的实例混淆，表示类内创建实例
2）super.方法 //调用父类方法
3）@Override //重写父类方法
4）instanceof // object instanceof Circle，对象转换

【抽象类和接口】
1）所有和抽象有关的东西，都斜体表示

【泛型】
1）Collections.shuffle()  //随机打乱数组
2）Collections包针对链表

【线性表、栈、队列和优先队列】
【线性表】
1）set、list、queue都继承Collection这个包，并且该包中有一些公共方法
2）list.contains(a) //判断list中是否有元素a，若有返回true
3）list.remove(a) //删除list中的a元素
4）list.size() //返回list的大小
5）list.clone(list1) //使得list中的内容与list1相同
6）list.addAll(list1) //将list1中元素添加到list中，list.addAll(index, collection) //在指定位置添加一个集合
7）list.retainAll(list1) //list1和list取交集
8）list.removeAll(list1) //将list中所有list1的包含的元素删除
9）Iterator<String> iterator = collection.iterator();
        while (iterator.hasNext())
        {
            System.out.println(iterator.next().toUpperCase() + " ");
        }
    //迭代器
10）list.forEach(e->a) //对list中的每个元素执行a操作
11）list.add(index, element) //在指定位置插入元素
12）list.set(index, element) //将指定位置元素变为element
13）list.indexOf(element) //获取element在list中第一次出现的下标
14）list.lastIndexOf(element) //获取element在list中最后一次出现的下标
15）list.subList(fromIndex, toIndex) //获取下标从fromIndex到toIndex的子线性表
16）ListIterator<Integer> list1 = list.listIterator(); //增强双向遍历能力，其方法运用见P29，20-4a，20-4b
17）ArrayList：通过下标随机访问元素
       LinkedList：在起始位置插入或删除元素
       Array：不需要在进程中插入或删除元素
18）Collections.disjoint(collection1, collection2)// 若c1和c2中没有相同的元素返回true
19）Collections.frequency(collection1, a)// 返回c1中a元素的个数

【队列】
1）queue.poll()// 获取并删除队列头元素，若队列为空则返回null
2）queue.remove()// 获取并删除队列头元素，若队列为空则抛出异常
3）queue.peek()// 获取但不删除队列头元素，若队列为空则返回null
4）queue.element()// 获取但不删除队列头元素，若队列为空则抛出异常
5）LinkedList继承List || Deque（双端队列） || Queue
6）PriorityQueue //优先队列，会自动把队列内元素排序

【散列】
1）map.put(key, value)
2）String key : map.keySet //遍历key
3）String value : map.values() //遍历value
4）Map.Entry<String, String> entry : map.entrySet() //entry方法
5）map.forEach((key,value)->a)// forEach方法，遍历key和value来进行a操作
